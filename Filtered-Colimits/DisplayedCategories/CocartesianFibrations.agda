module Filtered-Colimits.DisplayedCategories.CocartesianFibrations where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels

open import Cubical.Data.Sigma
open import Cubical.Relation.Binary.Poset

open import Cubical.Categories.Category
open import Cubical.Categories.Functor
open import Cubical.Categories.NaturalTransformation
open import Cubical.Categories.Instances.Functors
open import Cubical.Categories.Instances.Poset
open import Cubical.Categories.Morphism

open import Filtered-Colimits.General.Lemma
open import Filtered-Colimits.General.Poset
open import Filtered-Colimits.Category.Functors
open import Filtered-Colimits.Category.PosetCat
open import Filtered-Colimits.DisplayedCategories.DisplayedCategories
open import Filtered-Colimits.DisplayedCategories.IsoDispCat
open import Filtered-Colimits.DisplayedCategories.CocartesianMorphisms
open import Filtered-Colimits.DisplayedCategories.Functors
open import Filtered-Colimits.DisplayedCategories.DispPreorder

private
  variable
    ‚ÑìC ‚ÑìC' : Level

open Category
open dispCat
open dispCat-Funct
open dispPreorder
open eq-dF
open isDispPreorder
open Functor
open NatTrans
open dispCatIso
open NatIso
open isIso
open PosetStr
open IsPoset
open eqFunct

module _ (C : Category ‚ÑìC ‚ÑìC')
         (‚ÑìD ‚ÑìD' : Level) where
         
  private
    ‚Ñì = ‚Ñì-max (‚Ñì-max ‚ÑìC ‚ÑìD) (‚Ñì-max ‚ÑìC' ‚ÑìD')

  cocartFibrUnivDispPreorderCat : Category (‚Ñì-suc ‚Ñì) ‚Ñì
  cocartFibrUnivDispPreorderCat .ob = Œ£[ D ‚àà dispPreorder C ‚ÑìD ‚ÑìD' ] isUnivalent-dC (disp-cat D) √ó isCocartesianFibration (disp-cat D)
  cocartFibrUnivDispPreorderCat .Hom[_,_] (D , _) (D' , _) = Œ£ ((dispPreorderCat C ‚ÑìD ‚ÑìD') [ D , D' ]) preservesCocartMor
  cocartFibrUnivDispPreorderCat .id {D , _} = id (dispPreorderCat C ‚ÑìD ‚ÑìD') {D} , preservesCocartMor-id (disp-cat D)
  cocartFibrUnivDispPreorderCat ._‚ãÜ_ {D , _} {D' , _} {D'' , _} (F , preservF) (G , preservG) =  (F ‚ãÜ·µà·∂† G , preservesCocartMor-seq F G preservF preservG)
  cocartFibrUnivDispPreorderCat .‚ãÜIdL {D , _} {D' , _} (F , _) = Œ£‚â°Prop isProp-preservesCocartMor (‚ãÜIdL (dispPreorderCat C ‚ÑìD ‚ÑìD') {x = D} {y = D'} F)
  cocartFibrUnivDispPreorderCat .‚ãÜIdR {D , _} {D' , _} (F , _) = Œ£‚â°Prop isProp-preservesCocartMor (‚ãÜIdR (dispPreorderCat C ‚ÑìD ‚ÑìD') {x = D} {y = D'} F)
  cocartFibrUnivDispPreorderCat .‚ãÜAssoc {D , _} {D' , _} {D'' , _} {D''' , _} (F , _) (G , _) (H , _) =
              Œ£‚â°Prop isProp-preservesCocartMor (‚ãÜAssoc (dispPreorderCat C ‚ÑìD ‚ÑìD') {x = D} {y = D'} {z = D''} {w = D'''} F G H)
  cocartFibrUnivDispPreorderCat .isSetHom {D , _} {D' , _} = isSetŒ£ (isSetHom (dispPreorderCat C ‚ÑìD ‚ÑìD') {x = D} {y = D'}) (Œª F ‚Üí isProp‚ÜíisSet (isProp-preservesCocartMor F))


module _ {‚ÑìD ‚ÑìD' : Level}
         {C : Category ‚ÑìC ‚ÑìC'} where

  dispCat‚ÜífunctToPOSET : Functor (cocartFibrUnivDispPreorderCat C ‚ÑìD ‚ÑìD') (FUNCTOR C (POSET ‚ÑìD ‚ÑìD'))
  dispCat‚ÜífunctToPOSET = F
    where
    toPoset : ob (cocartFibrUnivDispPreorderCat C ‚ÑìD ‚ÑìD') ‚Üí ob C ‚Üí Poset ‚ÑìD ‚ÑìD'
    toPoset (D , isUnivD , isCocartFibD) x = ((disp-cat D) ‚¶Ö x ‚¶Ü) , posetStruct
      where
      posetStruct : PosetStr ‚ÑìD' (disp-cat D ‚¶Ö x ‚¶Ü)
      posetStruct ._‚â§_ a b = (disp-cat D) [ id C , a , b ]·¥∞
      posetStruct .isPoset .is-set = isSetFiber (is-disp-preorder D) x
      posetStruct .isPoset .is-prop-valued = isPropMor (is-disp-preorder D) (id C)
      posetStruct .isPoset .is-refl a = dC-id (disp-cat D)
      posetStruct .isPoset .is-trans a b c a‚â§b b‚â§c = subst (Œª f ‚Üí (disp-cat D) [ f , a , c ]·¥∞) (‚ãÜIdL C (id C)) (a‚â§b ‚ãÜ‚ü® disp-cat D ‚ü©·¥∞ b‚â§c)
      posetStruct .isPoset .is-antisym a b a‚â§b b‚â§a = equivFun (invEquiv (dC-univEquiv (disp-cat D) isUnivD a b)) a‚âÉb
        where
        a‚âÉb : dispCatIso (disp-cat D) idCatIso a b
        a‚âÉb .dC-mor = a‚â§b
        a‚âÉb .dC-inv = b‚â§a
        a‚âÉb .dC-sec = isPropMor (is-disp-preorder D) (id C) _ _ _ _
        a‚âÉb .dC-ret = isPropMor (is-disp-preorder D) (id C) _ _ _ _

    H : (D : ob (cocartFibrUnivDispPreorderCat C ‚ÑìD ‚ÑìD')) ‚Üí {x y : ob C} ‚Üí (f : C [ x , y ]) ‚Üí Functor (PosetCategory (toPoset D x)) (PosetCategory (toPoset D y))
    H (D , isUnivD , isCocartFibD) f .F-ob a = isCocartesianFibration-getOb (disp-cat D) isCocartFibD f a
    H (D , isUnivD , isCocartFibD) {x} {y} f .F-hom {a} {a'} a‚â§a' =
      isCocartesian-getHom (disp-cat D) f (‚ãÜIdR C f) a b b' u (subst (Œª f ‚Üí (disp-cat D) [ f , a , b' ]·¥∞) (‚ãÜIdL C f) (a‚â§a' ‚ãÜ‚ü® disp-cat D ‚ü©·¥∞ u'))
                          (isCocartesianFibration-getIsCocart (disp-cat D) isCocartFibD f a)
      where
      b = isCocartesianFibration-getOb (disp-cat D) isCocartFibD f a
      b' = isCocartesianFibration-getOb (disp-cat D) isCocartFibD f a'
      u = isCocartesianFibration-getHom (disp-cat D) isCocartFibD f a 
      u' = isCocartesianFibration-getHom (disp-cat D) isCocartFibD f a'
    H (D , isUnivD , isCocartFibD) f .F-id = is-prop-valued (snd (toPoset (D , isUnivD , isCocartFibD) _)) _ _ _ _
    H (D , isUnivD , isCocartFibD) f .F-seq u v = is-prop-valued (snd (toPoset (D , isUnivD , isCocartFibD) _)) _ _ _ _
    G :  ob (cocartFibrUnivDispPreorderCat C ‚ÑìD ‚ÑìD') ‚Üí Functor C (POSET ‚ÑìD ‚ÑìD')
    G (D , isUnivD , isCocartFibD) .F-ob = toPoset (D , isUnivD , isCocartFibD)
    G (D , isUnivD , isCocartFibD) .F-hom = H (D , isUnivD , isCocartFibD)
    G (D , isUnivD , isCocartFibD) .F-id {x} = eqFunct‚Üí‚â° eq
      where
      eq : eqFunct (H (D , isUnivD , isCocartFibD) (id C)) ùüô‚ü® PosetCategory (toPoset (D , isUnivD , isCocartFibD) x) ‚ü©
      eq .eq-ob a = isCocartesianFibration-unicityOb (disp-cat D) isCocartFibD (id C) a a (dC-id (disp-cat D) , isCocartesian-id (disp-cat D) a)
      eq .eq-hom u = isPropMor (is-disp-preorder D) _ _ _ _ _
    G (D , isUnivD , isCocartFibD) .F-seq f g = eqFunct‚Üí‚â° eq
      where
      eq : eqFunct (H (D , isUnivD , isCocartFibD) (f ‚ãÜ‚ü® C ‚ü© g)) (H (D , isUnivD , isCocartFibD) f ‚ãÜ·∂† H (D , isUnivD , isCocartFibD) g)
      eq .eq-ob a = isCocartesianFibration-unicityOb (disp-cat D) isCocartFibD (f ‚ãÜ‚ü® C ‚ü© g) a c ((u ‚ãÜ‚ü® disp-cat D ‚ü©·¥∞ v) , isCocart-seq)
        where
        b = (H (D , isUnivD , isCocartFibD) f) ‚üÖ a ‚üÜ
        u = isCocartesianFibration-getHom (disp-cat D) isCocartFibD f a
        isCocart-u = isCocartesianFibration-getIsCocart (disp-cat D) isCocartFibD f a
       
        c = (H (D , isUnivD , isCocartFibD) g) ‚üÖ b ‚üÜ
        v = isCocartesianFibration-getHom (disp-cat D) isCocartFibD g b
        isCocart-v = isCocartesianFibration-getIsCocart (disp-cat D) isCocartFibD g b

        isCocart-seq : isCocartesian (disp-cat D) (f ‚ãÜ‚ü® C ‚ü© g) a c (u ‚ãÜ‚ü® disp-cat D ‚ü©·¥∞ v)
        isCocart-seq {g = g'} p {d} w = uniqueExists v'
                          (isPropMor (is-disp-preorder D) _ _ _ _ _) (Œª _ ‚Üí isProp‚ÜíisSet (isPropMor (is-disp-preorder D) _ _ _) _ _) Œª _ _ ‚Üí isPropMor (is-disp-preorder D) _ _ _ _ _
          where
          u' = isCocartesian-getHom (disp-cat D) f (sym (‚ãÜAssoc C _ _ _) ‚àô p) a b d u w isCocart-u
          v' = isCocartesian-getHom (disp-cat D) g refl b c d v u' isCocart-v
        
      eq .eq-hom u  = isPropMor (is-disp-preorder D) _ _ _ _ _

    restrFunct : (D D' : ob (cocartFibrUnivDispPreorderCat C ‚ÑìD ‚ÑìD')) ‚Üí (f : dispCat-Funct (disp-cat (fst D)) (disp-cat (fst D'))) ‚Üí (x : ob C) ‚Üí Functor (PosetCategory (toPoset D x)) (PosetCategory (toPoset D' x))
    restrFunct _ _ f x .F-ob a = f ‚üÖ a ‚üÜ·¥∞
    restrFunct _ _ f x .F-hom u = f ‚ü™ u ‚ü´·¥∞
    restrFunct _ _ f x .F-id = dF-id f
    restrFunct _ (D' , _) f x .F-seq u v = isPropMor (is-disp-preorder D') _ _ _ _ _
  
    Œ± : (D D' : ob (cocartFibrUnivDispPreorderCat C ‚ÑìD ‚ÑìD')) ‚Üí (f : dispCat-Funct (disp-cat (fst D)) (disp-cat (fst D'))) ‚Üí preservesCocartMor f ‚Üí NatTrans (G D) (G D')
    Œ± D D' f preservf .N-ob x = restrFunct D D' f x
    Œ± (D , isUnivD , isCocartFibrD) (D' , isUnivD' , isCocartFibrD') f preservf .N-hom {x} {y} g = eqFunct‚Üí‚â° eq
      where
      eq : eqFunct (H (D , isUnivD , isCocartFibrD) g ‚ãÜ·∂† restrFunct  (D , isUnivD , isCocartFibrD) (D' , isUnivD' , isCocartFibrD') f y)
                   (restrFunct (D , isUnivD , isCocartFibrD) (D' , isUnivD' , isCocartFibrD') f x ‚ãÜ·∂† H (D' , isUnivD' , isCocartFibrD') g)
      eq .eq-ob a = sym (isCocartesianFibration-unicityOb (disp-cat D') isCocartFibrD' g (f ‚üÖ a ‚üÜ·¥∞) (f ‚üÖ a' ‚üÜ·¥∞) (f ‚ü™ u ‚ü´·¥∞ , preservf u isCocart-u))
        where
        a' = isCocartesianFibration-getOb (disp-cat D) isCocartFibrD g a
        u = isCocartesianFibration-getHom (disp-cat D) isCocartFibrD g a
        isCocart-u = isCocartesianFibration-getIsCocart (disp-cat D) isCocartFibrD g a
      eq .eq-hom u = isPropMor (is-disp-preorder D') _ _ _ _ _
    
    F : Functor (cocartFibrUnivDispPreorderCat C ‚ÑìD ‚ÑìD') (FUNCTOR C (POSET ‚ÑìD ‚ÑìD'))
    F .F-ob = G
    F .F-hom {D} {D'} (f , preservf) = Œ± D D' f preservf
    F .F-id  {D , _ , _} = makeNatTransPath (funExt (Œª x ‚Üí eqFunct‚Üí‚â° (record { eq-ob = Œª a ‚Üí refl ; eq-hom = Œª u ‚Üí isPropMor (is-disp-preorder D) _ _ _ _ _ })))
    F .F-seq {z = D'' , _ , _} f f' = makeNatTransPath (funExt (Œª x ‚Üí eqFunct‚Üí‚â° (record { eq-ob = Œª a ‚Üí refl ; eq-hom = Œª u ‚Üí isPropMor (is-disp-preorder D'') _ _ _ _ _ })))

  functToPOSET‚ÜídispCat :  Functor (FUNCTOR C (POSET ‚ÑìD ‚ÑìD')) (cocartFibrUnivDispPreorderCat C ‚ÑìD ‚ÑìD')
  functToPOSET‚ÜídispCat = ùë≠
    where
    D : Functor C (POSET ‚ÑìD ‚ÑìD') ‚Üí dispCat C ‚ÑìD ‚ÑìD'
    D G .dC-ob x = fst (G ‚üÖ x ‚üÜ)
    D G .dC-hom {x} {y} f a b = G ‚ü™ f ‚ü´ ‚üÖ a ‚üÜ ‚â§[ G ‚üÖ y ‚üÜ ] b
    D G .dC-homSet {x} {y} f a b = isProp‚ÜíisSet (is-prop-valued (snd (G ‚üÖ y ‚üÜ)) _ _)
    D G .dC-id {x} {a} = ‚â°‚Üí‚â§ (G ‚üÖ x ‚üÜ) (cong (Œª G ‚Üí G ‚üÖ a ‚üÜ) (F-id G))
    D G .dC-‚ãÜ {x} {y} {z} {a} {b} {c} {f} {g} p q =
     (G ‚ü™ f ‚ãÜ‚ü® C ‚ü© g ‚ü´) ‚üÖ a ‚üÜ          ‚â§[ G ‚üÖ z ‚üÜ ]‚ü® ‚â°‚Üí‚â§ (G ‚üÖ z ‚üÜ) (cong (Œª G ‚Üí G ‚üÖ a ‚üÜ) (F-seq G _ _)) ‚ü©
     (G ‚ü™ g ‚ü´) ‚üÖ (G ‚ü™ f ‚ü´) ‚üÖ a ‚üÜ ‚üÜ    ‚â§[ G ‚üÖ z ‚üÜ ]‚ü® G ‚ü™ g ‚ü´ ‚ü™ p ‚ü´ ‚ü©
     G ‚ü™ g ‚ü´ ‚üÖ b ‚üÜ                     ‚â§[ G ‚üÖ z ‚üÜ ]‚ü® q ‚ü© 
     c                                  [ G ‚üÖ z ‚üÜ ]‚ñ°
    D G .dC-‚ãÜIdL p = is-prop-valued (snd (G ‚üÖ _ ‚üÜ)) _ _ _ _
    D G .dC-‚ãÜIdR p = is-prop-valued (snd (G ‚üÖ _ ‚üÜ)) _ _ _ _
    D G .dC-‚ãÜAssoc p q r = is-prop-valued (snd (G ‚üÖ _ ‚üÜ)) _ _ _ _

    isDispPreorderDG : (G : Functor C (POSET ‚ÑìD ‚ÑìD')) ‚Üí isDispPreorder (D G)
    isDispPreorderDG G .isSetFiber x = is-set (snd (G ‚üÖ x ‚üÜ))
    isDispPreorderDG G .isPropMor f a b = is-prop-valued (snd (G ‚üÖ _ ‚üÜ)) _ _

    D-preorder : Functor C (POSET ‚ÑìD ‚ÑìD') ‚Üí dispPreorder C ‚ÑìD ‚ÑìD'
    D-preorder G .disp-cat = D G
    D-preorder G .is-disp-preorder = isDispPreorderDG G

    isUnivDG : (G : Functor C (POSET ‚ÑìD ‚ÑìD')) ‚Üí isUnivalent-dC (D G)
    isUnivDG G a b .equiv-proof p = (a‚â°b , makeDispCatIsoPath (D G) (dC-pathToIso (D G) a‚â°b) p (is-prop-valued (snd (G ‚üÖ _ ‚üÜ)) _ _ _ _)) ,
                                    Œª {(a‚â°b' , _) ‚Üí Œ£‚â°Prop (Œª a‚â°b ‚Üí isSetDispCatIso (D G) idCatIso _ _ _ _) (is-set (snd (G ‚üÖ _ ‚üÜ)) _ _ _ _)}
      where
      a‚â§b = a ‚â§[ G ‚üÖ _ ‚üÜ ]‚ü® ‚â°‚Üí‚â§ (G ‚üÖ _ ‚üÜ) (cong (Œª H ‚Üí H ‚üÖ a ‚üÜ) (sym (F-id G))) ‚ü© G ‚ü™ id C ‚ü´ ‚üÖ a ‚üÜ ‚â§[ G ‚üÖ _ ‚üÜ ]‚ü® dC-mor p ‚ü© b [ G ‚üÖ _ ‚üÜ ]‚ñ°
      b‚â§a = b ‚â§[ G ‚üÖ _ ‚üÜ ]‚ü® ‚â°‚Üí‚â§ (G ‚üÖ _ ‚üÜ) (cong (Œª H ‚Üí H ‚üÖ b ‚üÜ) (sym (F-id G))) ‚ü© G ‚ü™ id C ‚ü´ ‚üÖ b ‚üÜ ‚â§[ G ‚üÖ _ ‚üÜ ]‚ü® dC-inv p ‚ü© a [ G ‚üÖ _ ‚üÜ ]‚ñ°
      a‚â°b = is-antisym (snd (G ‚üÖ _ ‚üÜ)) a b a‚â§b b‚â§a

    isCocartFibrDG : (G : Functor C (POSET ‚ÑìD ‚ÑìD')) ‚Üí isCocartesianFibration (D G)
    isCocartFibrDG G {x} {y} f a = (b , b‚â§b , isCocartRefl) ,
                                   Œª {(b' , ie , isCocart-ie) ‚Üí Œ£‚â°Prop (Œª _ ‚Üí isPropŒ£ (is-prop-valued (snd (G ‚üÖ _ ‚üÜ)) _ _) Œª _ ‚Üí isProp-isCocartesian (D G) _)
                                   (unicity b' ie isCocart-ie) }
      where
      b = G ‚ü™ f ‚ü´ ‚üÖ a ‚üÜ
      b‚â§b = is-refl (snd (G ‚üÖ _ ‚üÜ)) b
      isCocartRefl : isCocartesian (D G) f a b b‚â§b
      isCocartRefl {g = g} {h} p {c} ie = uniqueExists ie' (is-prop-valued (snd (G ‚üÖ _ ‚üÜ)) _ _ _ _)
                                          (Œª _ ‚Üí isProp‚ÜíisSet (is-prop-valued (snd (G ‚üÖ _ ‚üÜ)) _ _) _ _) Œª _ _ ‚Üí is-prop-valued (snd (G ‚üÖ _ ‚üÜ)) _ _ _ _
        where
        ie' : G ‚ü™ g ‚ü´ ‚üÖ b ‚üÜ ‚â§[ G ‚üÖ _ ‚üÜ ] c
        ie' = 
          G ‚ü™ g ‚ü´ ‚üÖ G ‚ü™ f ‚ü´ ‚üÖ a ‚üÜ ‚üÜ     ‚â§[ G ‚üÖ _ ‚üÜ ]‚ü® ‚â°‚Üí‚â§ (G ‚üÖ _ ‚üÜ) (cong (Œª H ‚Üí H ‚üÖ a ‚üÜ) (sym (F-seq G _ _))) ‚ü©
          G ‚ü™ f ‚ãÜ‚ü® C ‚ü© g ‚ü´ ‚üÖ a ‚üÜ         ‚â§[ G ‚üÖ _ ‚üÜ ]‚ü® ‚â°‚Üí‚â§ (G ‚üÖ _ ‚üÜ) (cong (Œª f ‚Üí G ‚ü™ f ‚ü´ ‚üÖ a ‚üÜ) p) ‚ü©
          G ‚ü™ h ‚ü´ ‚üÖ a ‚üÜ                 ‚â§[ G ‚üÖ _ ‚üÜ ]‚ü® ie ‚ü©
          c                              [ G ‚üÖ _ ‚üÜ ]‚ñ°
       
      unicity : (b' : fst (G ‚üÖ _ ‚üÜ)) ‚Üí (ie : (G ‚ü™ f ‚ü´) ‚üÖ a ‚üÜ ‚â§[ G ‚üÖ _ ‚üÜ ] b') ‚Üí isCocartesian (D G) f a b' ie ‚Üí b ‚â° b'
      unicity b' ie isCocart-ie = is-antisym (snd (G ‚üÖ _ ‚üÜ)) b b' b‚â§b' b'‚â§b
        where
        b‚Üíb' = isCocartesian-getHom (D G) f (‚ãÜIdR C f) a b b' b‚â§b ie isCocartRefl
        b‚â§b' : b ‚â§[ G ‚üÖ _ ‚üÜ ] b'
        b‚â§b' = b ‚â§[ G ‚üÖ _ ‚üÜ ]‚ü® ‚â°‚Üí‚â§ (G ‚üÖ _ ‚üÜ) (cong (Œª H ‚Üí H ‚üÖ b ‚üÜ) (sym (F-id G))) ‚ü© G ‚ü™ id C ‚ü´ ‚üÖ b ‚üÜ ‚â§[ G ‚üÖ _ ‚üÜ ]‚ü® b‚Üíb' ‚ü© b' [ G ‚üÖ _ ‚üÜ ]‚ñ°

        b'‚Üíb = isCocartesian-getHom (D G) f (‚ãÜIdR C f) a b' b ie b‚â§b isCocart-ie
        b'‚â§b : b' ‚â§[ G ‚üÖ _ ‚üÜ ] b
        b'‚â§b = b' ‚â§[ G ‚üÖ _ ‚üÜ ]‚ü® ‚â°‚Üí‚â§ (G ‚üÖ _ ‚üÜ) (cong (Œª H ‚Üí H ‚üÖ b' ‚üÜ) (sym (F-id G))) ‚ü© G ‚ü™ id C ‚ü´ ‚üÖ b' ‚üÜ ‚â§[ G ‚üÖ _ ‚üÜ ]‚ü® b'‚Üíb ‚ü© b [ G ‚üÖ _ ‚üÜ ]‚ñ°

    F : {G H : Functor C (POSET ‚ÑìD ‚ÑìD')} ‚Üí NatTrans G H ‚Üí dispCat-Funct (D G) (D H)
    F {G} {H} Œ± .dF-ob {x} a = Œ± ‚ü¶ x ‚üß ‚üÖ a ‚üÜ
    F {G} {H} Œ± .dF-hom {x} {y} {f} {a} {b} ie = 
      (H ‚ü™ f ‚ü´) ‚üÖ (Œ± ‚ü¶ x ‚üß) ‚üÖ a ‚üÜ ‚üÜ         ‚â§[ H ‚üÖ _ ‚üÜ ]‚ü® ‚â°‚Üí‚â§ (H ‚üÖ _ ‚üÜ) (cong (Œª G ‚Üí G ‚üÖ a ‚üÜ) (sym (N-hom Œ± f))) ‚ü©
      Œ± ‚ü¶ y ‚üß ‚üÖ G ‚ü™ f ‚ü´ ‚üÖ a ‚üÜ ‚üÜ             ‚â§[ H ‚üÖ _ ‚üÜ ]‚ü® Œ± ‚ü¶ y ‚üß ‚ü™ ie ‚ü´ ‚ü©
      Œ± ‚ü¶ y ‚üß ‚üÖ b ‚üÜ                          [ H ‚üÖ _ ‚üÜ ]‚ñ°
    F {G} {H} Œ± .dF-id = is-prop-valued (snd (H ‚üÖ _ ‚üÜ)) _ _ _ _
    F {G} {H} Œ± .dF-seq ie ie' = is-prop-valued (snd (H ‚üÖ _ ‚üÜ)) _ _ _ _

    preservCocart : {G H : Functor C (POSET ‚ÑìD ‚ÑìD')} ‚Üí (Œ± : NatTrans G H) ‚Üí preservesCocartMor (F Œ±)
    preservCocart {G} {H} Œ± {f = f} {a} {b} ie isCocart-ie {g = g} {h} p {c'} ie' = uniqueExists ie''
                                              (is-prop-valued (snd (H ‚üÖ _ ‚üÜ)) _ _ _ _) (Œª _ ‚Üí isProp‚ÜíisSet (is-prop-valued (snd (H ‚üÖ _ ‚üÜ)) _ _) _ _) Œª _ _ ‚Üí is-prop-valued (snd (H ‚üÖ _ ‚üÜ)) _ _ _ _
      where
      c = G ‚ü™ h ‚ü´ ‚üÖ a ‚üÜ
      u = isCocartesianFibration-getHom (D G) (isCocartFibrDG G) h a
      isCocart-u = isCocartesianFibration-getIsCocart (D G) (isCocartFibrDG G) h a
      v = isCocartesian-getHom (D G) f p a b c ie u isCocart-ie
      
      ie'' : (H ‚ü™ g ‚ü´) ‚üÖ F Œ± ‚üÖ b ‚üÜ·¥∞ ‚üÜ ‚â§[ H ‚üÖ _ ‚üÜ ] c'
      ie'' = 
        (H ‚ü™ g ‚ü´) ‚üÖ Œ± ‚ü¶ _ ‚üß ‚üÖ b ‚üÜ ‚üÜ    ‚â§[ H ‚üÖ _ ‚üÜ ]‚ü® ‚â°‚Üí‚â§ (H ‚üÖ _ ‚üÜ) (cong (_‚üÖ b ‚üÜ) (sym (N-hom Œ± g))) ‚ü©
        Œ± ‚ü¶ _ ‚üß ‚üÖ (G ‚ü™ g ‚ü´) ‚üÖ b ‚üÜ ‚üÜ    ‚â§[ H ‚üÖ _ ‚üÜ ]‚ü® Œ± ‚ü¶ _ ‚üß ‚ü™ v ‚ü´ ‚ü©
        Œ± ‚ü¶ _ ‚üß ‚üÖ G ‚ü™ h ‚ü´ ‚üÖ a ‚üÜ ‚üÜ      ‚â§[ H ‚üÖ _ ‚üÜ ]‚ü®  ‚â°‚Üí‚â§ (H ‚üÖ _ ‚üÜ) (cong (_‚üÖ a ‚üÜ) (N-hom Œ± h)) ‚ü©
        (H ‚ü™ h ‚ü´) ‚üÖ Œ± ‚ü¶ _ ‚üß ‚üÖ a ‚üÜ ‚üÜ    ‚â§[ H ‚üÖ _ ‚üÜ ]‚ü® ie' ‚ü©
        c'                              [ H ‚üÖ _ ‚üÜ ]‚ñ°
        
    ùë≠ : Functor (FUNCTOR C (POSET ‚ÑìD ‚ÑìD')) (cocartFibrUnivDispPreorderCat C ‚ÑìD ‚ÑìD')
    ùë≠ .F-ob G = D-preorder G , isUnivDG G , isCocartFibrDG G
    ùë≠ .F-hom Œ± = (F Œ±) , (preservCocart Œ±)
    ùë≠ .F-id {G} = Œ£‚â°Prop (Œª F ‚Üí isProp-preservesCocartMor F) (eq-dF‚Üí‚â° eq)
     where
      eq : eq-dF (F (idTrans G)) dC-idFunct
      eq .eq-dF-ob a = refl
      eq .eq-dF-hom ie = is-prop-valued (snd (G ‚üÖ _ ‚üÜ)) _ _ _ _
    ùë≠ .F-seq {G} {G'} {G''} Œ± Œ≤ = Œ£‚â°Prop (Œª F ‚Üí isProp-preservesCocartMor F) (eq-dF‚Üí‚â° eq)
      where
      eq : eq-dF (F (Œ± ‚óè·µõ Œ≤)) ((F Œ±) ‚ãÜ·µà·∂† (F Œ≤))
      eq .eq-dF-ob a = refl
      eq .eq-dF-hom p = is-prop-valued (snd (G'' ‚üÖ _ ‚üÜ)) _ _ _ _
